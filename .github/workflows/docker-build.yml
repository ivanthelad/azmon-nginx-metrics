name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: nginx
            context: ./nginx
            dockerfile: ./nginx/Dockerfile
            platforms: linux/amd64,linux/arm64
          - service: nginx-exporter
            context: ./nginx-exporter
            dockerfile: ./nginx-exporter/Dockerfile
            platforms: linux/amd64,linux/arm64
          - service: metrics-collector
            context: ./azmonitor-metrics
            dockerfile: ./azmonitor-metrics/Dockerfile
            platforms: linux/amd64,linux/arm64
          - service: otel-exporter
            context: ./ingestor
            dockerfile: ./ingestor/Dockerfile
            platforms: linux/amd64,linux/arm64
          - service: blog-api
            context: ./blog-api
            dockerfile: ./blog-api/Dockerfile
            platforms: linux/amd64,linux/arm64

    name: Build ${{ matrix.service }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}},format=short
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ matrix.platforms }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

#    - name: Generate artifact attestation
#      if: github.event_name != 'pull_request'
#      uses: actions/attest-build-provenance@v1
#      with:
#        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
#        subject-digest: ${{ steps.build.outputs.digest }}
#        push-to-registry: true

  docker-compose-test:
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create test environment file
      run: |
        cat > .env << EOF
        AZURE_SUBSCRIPTION_ID=test-subscription
        AZURE_RESOURCE_GROUP=test-rg
        AZURE_RESOURCE_NAME=test-resource
        AZURE_REGION=northeurope
        AZURE_USE_MANAGED_IDENTITY=false
        SCRAPE_INTERVAL=30
        EOF

    - name: Test docker-compose configuration
      run: |
        docker-compose config
        echo "✅ Docker Compose configuration is valid"

    - name: Test service health checks
      run: |
        # Start services
        docker-compose up -d nginx nginx-exporter blog-api

        # Wait for services to start
        sleep 30

        # Test NGINX health
        curl -f http://localhost/health || (echo "❌ NGINX health check failed" && exit 1)
        echo "✅ NGINX health check passed"

        # Test Prometheus metrics
        curl -f http://localhost:9113/metrics || (echo "❌ Metrics endpoint failed" && exit 1)
        echo "✅ Prometheus metrics endpoint accessible"

        # Test Blog API health (through nginx proxy if available, or direct)
        curl -f http://localhost/blog/health || curl -f http://localhost:5000/health || (echo "❌ Blog API health check failed" && exit 1)
        echo "✅ Blog API health check passed"

        # Cleanup
        docker-compose down

#  security-scan:
#    runs-on: ubuntu-latest
#    needs: build-matrix
#    if: github.event_name != 'pull_request'
#    strategy:
#      matrix:
#        service: [nginx, nginx-exporter, metrics-collector, otel-exporter]

 #   steps:
 #   - name: Run Trivy vulnerability scanner
 #     uses: aquasecurity/trivy-action@master
 #     with:
 #       image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
 #       format: 'sarif'
 #       output: 'trivy-results.sarif'

 #   - name: Upload Trivy scan results to GitHub Security tab
 #     uses: github/codeql-action/upload-sarif@v3
 #     if: always()
 #     with:
 #       sarif_file: 'trivy-results.sarif'

  create-release:
    runs-on: ubuntu-latest
    needs: [build-matrix]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Docker Images

          The following Docker images have been built and pushed to GitHub Container Registry:

          - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/nginx:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/nginx-exporter:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/metrics-collector:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/otel-exporter:${{ github.ref_name }}`
          - `${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/blog-api:${{ github.ref_name }}`

          ## Usage

          To use these images, update your `docker-compose.yml` file to reference the tagged versions:

          ```yaml
          services:
            nginx:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/nginx:${{ github.ref_name }}
            nginx-exporter:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/nginx-exporter:${{ github.ref_name }}
            metrics-collector:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/metrics-collector:${{ github.ref_name }}
            otel-exporter:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/otel-exporter:${{ github.ref_name }}
            blog-api:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/blog-api:${{ github.ref_name }}
          ```

          ## Security

          All images have been scanned for vulnerabilities using Trivy.
        draft: false
        prerelease: false