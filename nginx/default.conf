server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    root /usr/share/nginx/html;
    index index.html index.htm;

    # Using built-in stub_status module for basic metrics

    # Basic stub_status for simple metrics (legacy support)
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        allow ::1;
        deny all;
    }

    # Status endpoint providing basic nginx metrics in JSON format
    location /status_json {
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        allow ::1;
        deny all;
        return 200 '{"status":"active","nginx_version":"$nginx_version","server_name":"$server_name"}';
        add_header Content-Type application/json;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Metrics endpoint for Prometheus exporter
    location /metrics {
        access_log off;
        return 200 "Use /nginx_status for basic metrics or /status_json for JSON status\n";
        add_header Content-Type text/plain;
    }

    # API simulation endpoints for generating diverse metrics
    location /api/v1/ {
        limit_req zone=api burst=20 nodelay;
        limit_conn addr 10;

        # Simulate different response times and status codes
        location ~ ^/api/v1/fast$ {
            return 200 '{"status":"ok","response_time":"fast"}';
            add_header Content-Type application/json;
        }

        location ~ ^/api/v1/slow$ {
            # Simulate slow response (note: actual delay not available without echo module)
            return 200 '{"status":"ok","response_time":"slow","note":"simulated_delay"}';
            add_header Content-Type application/json;
        }

        location ~ ^/api/v1/error$ {
            return 500 '{"error":"simulated_error"}';
            add_header Content-Type application/json;
        }

        location ~ ^/api/v1/not_found$ {
            return 404 '{"error":"not_found"}';
            add_header Content-Type application/json;
        }

        # Default API response
        return 200 '{"status":"ok","endpoints":["fast","slow","error","not_found"]}';
        add_header Content-Type application/json;
    }

    # Login simulation for rate limiting metrics
    location /login {
        limit_req zone=login burst=5 nodelay;
        return 200 '{"message":"login endpoint"}';
        add_header Content-Type application/json;
    }

    # Large file endpoint for testing bandwidth metrics
    location /large {
        # Simulate large file response
        return 200 "This simulates a large file response with lots of data...";
        add_header Content-Type text/plain;
        add_header Content-Length 1048576;  # 1MB
    }


    # Blog API endpoints - proxy to blog-api service
    location /blog/ {
        proxy_pass http://blog-api:5000/blog/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Enable request body buffering for POST/PUT requests
        proxy_request_buffering on;
        client_max_body_size 10M;

        # Timeout settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # CORS headers for API access
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # WebSocket endpoint stub (for future metrics)
    location /ws {
        return 426 "Upgrade Required";
        add_header Connection "Upgrade";
        add_header Upgrade "websocket";
    }

    # Static file serving with caching headers
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
    }

    # Main location block
    location / {
        limit_req zone=general burst=50 nodelay;
        try_files $uri $uri/ =404;

        # Add security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /404.html {
        internal;
    }

    location = /50x.html {
        internal;
    }
}